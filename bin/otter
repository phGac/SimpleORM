<?php

require_once __DIR__."/../autoload.php";
require_once __DIR__."/../src/Maker/Schema/SchemaMaker.php";

$arguments = [];
foreach ($argv as $arg) {
    $arg = explode("=", $arg);
    if(isset($arg[1]))
        $arguments[$arg[0]] = $arg[1];
    else
        $arguments[$arg[0]] = $arg[0];
}

if(isset($arguments['generate:schema:db'])) {
    
    if(! isset($arguments['--host']) || ! isset($arguments['--db']) || ! isset($arguments['--user']) || ! isset($arguments['--path']) || ! isset($arguments['--model']) || ! isset($arguments['--table'])) {
        echo "!! Arguments required: --host, --db, --user, --password, --path, --model, --table\n";
        exit();
    }

    $host = $arguments['--host'];
    $dbName = $arguments['--db'];
    $dbUser = $arguments['--user'];
    $dbPass = $arguments['--password'];

    $path = __DIR__.'/../'.$arguments['--path'];
    $modelName = $arguments['--model'];
    $tableName = $arguments['--table'];
    $schemaName = $modelName.'Schema';

    $conn = new \PDO( "sqlsrv:server=$host;Database=$dbName", $dbUser, $dbPass, ["CharacterSet" => 'UTF-8']);
    $conn->setAttribute(\PDO::SQLSRV_ATTR_ENCODING, \PDO::SQLSRV_ENCODING_UTF8);

    $stmt = $conn->prepare("SELECT  COLUMN_NAME, ORDINAL_POSITION, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = :tablename;");
    $stmt->bindParam(':tablename', $tableName, \PDO::PARAM_STR);
    $stmt->execute();

    if($stmt->errorCode() !== '00000') {
        echo "Error: ";
        print_r($conn->errorInfo());
        exit();
    }

    $rows = $stmt->fetchAll(\PDO::FETCH_ASSOC);

    if(count($rows) <= 0) {
        echo "Unknow table $tableName on $dbName [$host]";
        exit();
    }
    if(isset($arguments['--debug'])) {
        echo "rows:";
        print_r($rows);
    }

    $stmt = $conn->prepare("SELECT Col.Table_Name, Col.Column_Name, Constraint_Type from INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Constraint_Type = 'PRIMARY KEY' AND Col.TABLE_NAME = :tablename;");
    $stmt->bindParam(':tablename', $tableName, \PDO::PARAM_STR);
    $stmt->execute();

    if($stmt->errorCode() !== '00000') {
        echo "Error: ";
        print_r($conn->errorInfo());
        exit();
    }

    $rowPK = $stmt->fetch(\PDO::FETCH_ASSOC);
    $PrimaryKey = ($rowPK !== null && count($rowPK) > 0) ? $rowPK['Column_Name'] : null;

    $generate_schema = new \Otter\ORM\Maker\Schema\SchemaMaker($modelName);
    $xml = $generate_schema->sql_to_schema($rows, $PrimaryKey);
    $fileData = $generate_schema->prettyXML($xml);
    $file = fopen("$path/$schemaName.xml", 'w');
    fwrite($file, $fileData);
    fclose($file);

} else if(isset($arguments['generate:schema'])) {

    if(! isset($arguments['--path']) || ! isset($arguments['--model']) || ! isset($arguments['--attributes'])) {
        echo "!! Arguments required: --path, --model, --attributes\n";
        exit();
    }

    $path = __DIR__.'/../'.$arguments['--path'];
    $modelName = $arguments['--model'];
    $tableName = (isset($arguments['--table'])) ? $arguments['--table'] : $modelName;
    $attributes = $arguments['--attributes'];
    $schemaName = $modelName.'Schema';

    require_once __DIR__."/../src/bin/schema.php";

    $rows = explode(',', $attributes);
    $generate_schema = new GenerateSchema($modelName, $rows);
    $fileData = $generate_schema->new_schema($tableName);
    $file = fopen("$path/$schemaName.php", 'w');
    fwrite($file, $fileData);
    fclose($file);

} else {
    echo "missing arguments!\n";
}

/*

    // query que muestra las asociaciones entre tablas

 SELECT
    f.name AS foreign_key_name
   ,OBJECT_NAME(f.parent_object_id) AS table_name
   ,COL_NAME(fc.parent_object_id, fc.parent_column_id) AS constraint_column_name
   ,OBJECT_NAME (f.referenced_object_id) AS referenced_object
   ,COL_NAME(fc.referenced_object_id, fc.referenced_column_id) AS referenced_column_name
   ,is_disabled
   ,delete_referential_action_desc
   ,update_referential_action_desc
FROM sys.foreign_keys AS f
INNER JOIN sys.foreign_key_columns AS fc
   ON f.object_id = fc.constraint_object_id
--WHERE f.parent_object_id = OBJECT_ID('orders');



**/